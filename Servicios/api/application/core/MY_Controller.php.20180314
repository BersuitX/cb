<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');
require APPPATH . '/libraries/REST_Controller.php';

class MY_Controller extends REST_Controller {
    
    //Variables
    public $app;
    public $servicios;
    public $metodo;
    
    //For call the log insert
    public function retornar ($log,$res_data){
        
        //For call the log insert

       $this->load->database();

        $index = array("metodo","httpVerb","tipoServicio","canal","request","response","url","tiempo","isError","reqXML","resXML");

        foreach ($index as $k) {
            $log[$k] = isset($log[$k])?$log[$k]:"N/A";
            //$log[$k] = $this->esArray($log[$k])?$this->arrayToString($log[$k]):$log[$k];
            /*
            $log[$k] = str_replace("'", "\"", $log[$k]);
            */
        }

        if(intval($log["isError"])==0) {
            $log["resXMLDB"] = "";
            $log["reqXMLDB"] = "";
        }else{
            $log["resXMLDB"] = $log["resXML"];
            $log["reqXMLDB"] = $log["reqXML"];
        }

        $qError="insert into Logs (metodo,httpVerb,tipoServicio,canal,request,response,url,tiempo,isError) values ('".$log["metodo"]."','ERR','".$log["tipoServicio"]."','".$log["canal"]."','".json_encode($log["request"])."','Error al intentar guardar el metodo.','".$log["url"]."','".$log["tiempo"]."',".$log["isError"].")";
        $q="insert into Logs (metodo,httpVerb,tipoServicio,canal,request,response,url,tiempo,isError,reqXML,resXML) values ('".$log["metodo"]."','".$log["httpVerb"]."','".$log["tipoServicio"]."','".$log["canal"]."','".json_encode($log["request"])."','".json_encode($log["response"])."','".$log["url"]."','".$log["tiempo"]."',".$log["isError"].",'".$log["reqXMLDB"]."','".$log["resXMLDB"]."')";
        
        try{
            if ( !$this->db->simple_query($q) ){
                $this->db->simple_query($qError);
            }
        }catch(Exception $e){
            $this->db->simple_query($qError);
        }

        /**/
        try{


            $reg = date('Y/m/d H:i:s',strtotime("-5 hour",$_SERVER["REQUEST_TIME"]));
            $log["reg"] = $reg;
            unset($log["resXMLDB"]);
            unset($log["reqXMLDB"]);
            
            //$srv = print_r($_SERVER,true);
            //echo $srv;
            
            //$log["srv"] = $_SERVER;

            if($log["metodo"] == 'registerIMEI'){
                $log["reqXML"] = "Ignored";
            }

            $linea = isset($log["request"]["AccountId"])?$log["request"]["AccountId"]:(isset($log["request"]["numeroCuenta"])?$log["request"]["numeroCuenta"]:null);
            $segmento = isset($log["request"]["LineOfBusiness"])?$log["request"]["LineOfBusiness"]:null;
            $correo = isset($log["request"]["UserProfileID"])?$log["request"]["UserProfileID"]:(isset($log["request"]["nombreUsuario"])?$log["request"]["nombreUsuario"]:null);

            $log["linea"] = $linea;
            $log["segmento"] = $segmento;
            $log["correo"] = $correo;

            $log["srv_nodo"] = $_SERVER["SERVER_ADDR"];
            $log["srv_req_id"] = $_SERVER["UNIQUE_ID"];
            $log["http_origin"] = $_SERVER["HTTP_ORIGIN"];
            $log["http_user_agent"] = $_SERVER["HTTP_USER_AGENT"];

            $anio = date("Y",strtotime("-5 hour"));
            $mes = date("m",strtotime("-5 hour"));
            $dia = date("d",strtotime("-5 hour"));
            $hora = date("H_i_s",strtotime("-5 hour"));
            list($usec, $sec) = explode(" ", microtime());
            //$mili = $sec.".".$usec;

            $path = '/var/www/miclaroapp.com.co/public_html/logs/'.$anio.'/'.$mes.'/'.$dia;
            //$path = '/var/www/miclaroapp.com.co/public_html/archivos/logs/'.$anio.'/'.$mes.'/'.$dia;
            $fileName = $hora.".".$usec."xx".$log["metodo"]."xx".$log["srv_req_id"].'.json';

            if (!file_exists($path)) {
                mkdir($path, 0777, true);
            }

            if (file_exists($path)) {
                $output_file=$path.'/'.$fileName;
                $ifp = fopen( $output_file, 'wb' ); 

                $log["request"] = json_encode($log["request"]);
                $log["response"] = json_encode($log["response"]);
                
                fwrite( $ifp,json_encode($log));
                fclose( $ifp );
            }
        }catch(Exception $e){
           $r = "";
        }
        /**/

        return $res_data;
    }

    //Constructor
    function __construct()
    {
        header('Access-Control-Allow-Origin: *');
        header("Access-Control-Allow-Headers: X-API-KEY, Origin, X-Requested-With, Content-Type, Accept, Access-Control-Request-Method");
        header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE");
        $method = $_SERVER['REQUEST_METHOD'];
        if($method == "OPTIONS") {
            die();
        }
        
        parent::__construct();
        $this->lang->load("app","spanish");
        $this->load->library('GibberishAES');

        $this->app=$this->config->item('app');
        $this->servicios=$this->config->item('servicios');

        $uri_metodo= $this->uri->segment(3);

        if(isset($uri_metodo)){
            $uri_metodo=str_replace(".json","",$uri_metodo);

            if(isset($this->servicios[$uri_metodo])){
                $this->metodo=$uri_metodo;
            }else{
                $this->return_data(array("error"=>1,"response"=>$this->lang->line("error_servicio")));
                exit;
            }
        }else{
            //retorna error
            $this->return_data(array("error"=>1,"response"=>$this->lang->line("error_servicio")));
        }
        
        /*
        $headers = $this->input->request_headers();
        
        if (!isset($session["api_key"])) {
            if (!isset($headers["x-api-key"]) || $headers["x-api-key"]!=$this->config->item("api_key")) {
                $this->response(array('error' => '1','response'=>$this->lang->line("error_api_key")));
            }
        }else if( $session["api_key"]!=$this->config->item("api_key")){
            $this->response(NULL, 404);
        }
        */
    }

    function get_data($type,$var){
        $data = $this->$type($var);
        
        if($this->app["produccion"]){
          $data=$this->gibberishaes->dec($data,$this->app["AES"]); 
          
          if ($type=="post" || $type=="put") {
            $data=json_decode($data, true);
          }
        }
        
        return $data;
    }
    
    function return_data($data){
        
        if($this->app["produccion"]){
            if (is_array($data->response) || is_object($data->response) ) {
                $data->response=$this->gibberishaes->enc(json_encode($data->response),$this->app["AES"]);  
            }else{
                $data->response=$this->gibberishaes->enc($data->response,$this->app["AES"]); 
            }
        }
        
        //return $this->response($data);

        //return $resJSON;
        header('Content-Type: application/json');
        echo json_encode($data);
    }

    //Consumo de servicios REST POST 
    function curl($data){

        
        $log = array("request"=>$data,"canal"=>"N/A","metodo"=>$this->metodo,"httpVerb"=>"POST","tipoServicio"=>"SOAP");
        


        $starttime = microtime(true);
        //return array("error"=>1,"response"=>$data);

        if (!file_exists(APPPATH."views/Request/".$this->metodo.".php")){
            $log["response"] = $this->lang->line("error_archivo_request");
            $log["isError"] = 1;
            $res_data = array("error"=>1,"response"=>$this->lang->line("error_archivo_request"));
            return $this->retornar($log,$res_data);
            //return array("error"=>1,"response"=>$this->lang->line("error_archivo_request"));
        }

        if (!file_exists(APPPATH."views/Response/".$this->metodo.".php")){
            $log["response"] = $this->lang->line("error_archivo_response");
            $log["isError"] = 1;
            $res_data = array("error"=>1,"response"=>$this->lang->line("error_archivo_response"));
            return $this->retornar($log,$res_data);
            //return array("error"=>1,"response"=>$this->lang->line("error_archivo_response"));
        }

        $reqXML=$this->load->view("Request/".$this->metodo,$data,true);
        $log["reqXML"] = $reqXML;

        $tagResponseNS4='ns4'.$this->metodo.'Response';
        $tagResponseNS2='ns2'.$this->metodo.'Response';
        $tagResponseNS1='ns1'.$this->metodo.'Response';
        $tagResponseV1='v1'.$this->metodo;
        $tagResponseSmartLocation='urnget_position_response';
        $tagResponse=$this->metodo.'Response';
        $tagResponseTns='tns'.$this->metodo.'Response';
        $tagResponseCon='con'.$this->metodo.'Response';
        $tagResponseNS0='ns0'.$this->metodo.'Response';
        

        $header = array(
            "Content-type: text/xml;charset=\"utf-8\"",
            "Accept: text/xml",
            "Cache-Control: no-cache",
            "Pragma: no-cache",
            "Content-length: ".strlen($reqXML),
        );

        $selfcare=$this->config->item('selfcare');
        if(isset($selfcare[$this->metodo])){
            $header[]=$selfcare[$this->metodo];
        }else{
            $header[]="SOAPAction: \"run\"";
        }
        
        $urlServicio=$this->servicios[$this->metodo];
        
        if(isset($data["LineOfBusiness"])){
            if(intval($data["LineOfBusiness"])==1){
                $urlServicio = str_replace("{PORT}", "8400", $urlServicio);
                $urlServicio = str_replace("{PROJECT}", "SelfServiceFixed_Project", $urlServicio);
            }else if(intval($data["LineOfBusiness"])==2 || intval($data["LineOfBusiness"])==3){
                $urlServicio = str_replace("{PORT}", "8200", $urlServicio);
                $urlServicio = str_replace("{PROJECT}", "SelfServiceMobile_Project", $urlServicio);

            }else{
                $urlServicio = str_replace("{PROJECT}", "SelfServiceMobile_Project", $urlServicio);
                $urlServicio = str_replace("{PORT}", "8200", $urlServicio);
            }
        }else{
            $urlServicio = str_replace("{PROJECT}", "SelfServiceMobile_Project", $urlServicio);
            $urlServicio = str_replace("{PORT}", "8200", $urlServicio);
        }

        
        if(!isset($urlServicio) || $urlServicio==""){
            $log["response"] = "No se encontró el EndPoint de este servicio.";
            $log["isError"] = 1;
            $res_data = array("error"=>1,"response"=>"No se encontró el EndPoint de este servicio.");
            return $this->retornar($log,$res_data);
            //return array("error"=>1,"response"=>"No se encontró el EndPoint de este servicio.");
        }
        $log["url"] = $urlServicio;
        
        $soap_do = curl_init();
        curl_setopt($soap_do, CURLOPT_URL,$urlServicio);
        curl_setopt($soap_do, CURLOPT_CONNECTTIMEOUT, 0);
        curl_setopt($soap_do, CURLOPT_TIMEOUT,        0);
        curl_setopt($soap_do, CURLOPT_RETURNTRANSFER, true );
        curl_setopt($soap_do, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($soap_do, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($soap_do, CURLOPT_POST,           true );
        curl_setopt($soap_do, CURLOPT_POSTFIELDS,     $reqXML);
        curl_setopt($soap_do, CURLOPT_HTTPHEADER,     $header);
        $res = curl_exec($soap_do);
        $resHTML=$res;

        $now = new DateTime();
        $diff = microtime(true) - $starttime;
        $sec = intval($diff);
        $micro = $diff - $sec;
        $final = strftime('%T', mktime(0, 0, $sec)) . str_replace('0.', '.', sprintf('%.4f', $micro));
        $secs = $final;
        $log["tiempo"] = $secs;
        
        if(!$res) {
            $res = 'Error x: ' . curl_error($soap_do);
            curl_close($soap_do);
            
            $log["response"] = $res;
            $log["isError"] = 1;
            //$res_data = array("error"=>1,"response"=>$res);

            $res_data = array("error"=>1,"response"=> "En este momento no podemos atender esta solicitud, intenta nuevamente.");
            return $this->retornar($log,$res_data);
        } else {
            curl_close($soap_do);
            $res = preg_replace("/(<\/?)(\w+):([^>]*>)/", "$1$2$3", $res);

            $res = str_replace(" xmlns=\"http://services.cmPoller.sisges.telmex.com.co\"", "", $res);
            $res = str_replace(" xmlns=\"https://services.cmPoller.sisges.telmex.com.co\"", "", $res);
            $res = str_replace(" xmlns=\"Claro.SelfCareManagement.Services.Entities.Contracts\"", "", $res);
            $res = str_replace(" xmlns=\"Claro.SelfCareManagement.Services.Exception.Contracts\"", "", $res);
            
            $log["resXML"] = $res;

            try {
                libxml_use_internal_errors(true);
                $xml = new SimpleXMLElement($res);
            } catch (Exception $e) {
                
                $log["response"] = "En este momento no podemos atender esta solicitud, intenta nuevamente.".$e->getMessage().", ".$res." URL:".$urlServicio."- IP:".$_SERVER["SERVER_ADDR"];
                $log["isError"] = 1;
                $res_data = array("error"=>1,"response"=> "En este momento no podemos atender esta solicitud, intenta nuevamente.");
                return $this->retornar($log,$res_data);
                //return array("error"=>1,"response"=> "Error interno del servidor (BUS).".$e->getMessage().", ".$res." URL:".$urlServicio."- IP:".$_SERVER["SERVER_ADDR"] );
            }
           
                
            //return array("error"=>1,"res"=>$res,"reqXML"=>$reqXML,"xml"=>$xml);

            if(isset($xml->soapenvBody)){
                $body = $xml->soapenvBody;
            }else if(isset($xml->sBody)){
                $body = $xml->sBody;
            }else if(isset($xml->SBody)){
                $body = $xml->SBody;
            }
           
                
            if(isset($body)){

                if(array() === $body){
                    $body = $body[0];
                }

                if(isset($body->$tagResponseNS2)){
                    $body = $body->$tagResponseNS2;
                }else if(isset($body->$tagResponseNS1)){
                    $body = $body->$tagResponseNS1;
                }else if(isset($body->$tagResponseV1)){
                    $body = $body->$tagResponseV1;
                }else if(isset($body->$tagResponseNS4)){
                    $body = $body->$tagResponseNS4;
                }else if(isset($body->$tagResponse)){
                    $body = $body->$tagResponse;
                }else if(isset($body->$tagResponseSmartLocation)){
                    $body = $body->$tagResponseSmartLocation;
                }else if(isset($body->$tagResponseTns)){
                    $body = $body->$tagResponseTns;
                }else if(isset($body->$tagResponseCon)){
                    $body = $body->$tagResponseCon;
                }else if(isset($body->$tagResponseNS0)){
                    $body = $body->$tagResponseNS0;
                }else if(isset($body->ejecWS_Result)){
                    $body = $body->ejecWS_Result;
                }else if(isset($body->RecuperarContraseñaUsuarioResponse)){
                    $body = $body->RecuperarContraseñaUsuarioResponse;
                }else if(isset($body->CambiarContraseñaUsuarioResponse)){
                    $body = $body->CambiarContraseñaUsuarioResponse;
                    $cambioClave=1;
                }else{
                    $error=1;
                }


                if (isset($body) && !isset($error)) {

                    $response = json_decode(json_encode((array)$body), TRUE); 

                    if ((json_last_error() == JSON_ERROR_NONE)) {

                        if (isset($cambioClave)) {
                            $dataRes["claveActualizada"]=$response["esContraseñaActualizada"];
                            $response=$dataRes;
                        }

                        $response["req"]=$data;
                        $response['controller'] = $this;
                        
                        $resJSON=json_decode($this->load->view("Response/".$this->metodo,$response,true));
                        if ($resJSON) {
                            $resJSON->secs=$secs;
                        }

                        $log["response"] = $resJSON;
                        $log["isError"] = 0;
                        $res_data = $resJSON;
                        return $this->retornar($log,$res_data);
                        //return $resJSON;
                    }
                }
  
            }

            if(isset($xml->SBody->ns0Fault)){
                $tagFaultNS1='ns1'.$this->metodo.'Fault';

                if(isset($xml->SBody->ns0Fault->detail->$tagFaultNS1->Message)){

                    $temp=json_encode($xml->SBody->ns0Fault->detail->$tagFaultNS1);
                    $temp=json_decode($temp, true);
                    
                    $log["response"] = $temp["Message"];
                    $log["isError"] = 1;
                    $res_data = array("error"=>1,"response"=> $temp["Message"],"secs"=> $secs, "server"=>"Exception");
                }else{

                    $temp=json_encode($xml->SBody->ns0Fault);
                    $log["response"] = json_encode($xml->SBody->ns0Fault);
                    $log["isError"] = 1;
                    $res_data = array("error"=>1,"response"=> json_encode($xml->SBody->ns0Fault),"secs"=> $secs, "server"=>"Exception" );
                }

            }else if(isset($xml->sBody->sFault->detail->InnerFault->amessage)){
                $temp=json_encode($xml->sBody->sFault->detail->InnerFault);
                $temp=json_decode($temp, true);
                
                $log["response"] = $temp["amessage"];
                $log["isError"] = 1;
                $res_data = array("error"=>1,"response"=> $temp["amessage"],"secs"=> $secs, "server"=>"Exception");
                
            }else if(isset($xml->sBody->sFault)){
                $temp=json_encode($xml->sBody->sFault);
                $temp=json_decode($temp, true);
                
                $log["response"] = $temp["faultstring"];
                $log["isError"] = 1;
                $res_data = array("error"=>1,"response"=> $temp["faultstring"],"secs"=> $secs, "server"=>"Exception");

            }else{
                
                $log["response"] = "Error al consumir el SOAP";
                $log["isError"] = 1;
                $res_data = array("error"=>1,"response"=> "En este momento no podemos atender esta solicitud, intenta nuevamente.","secs"=> $secs );
            }

            return $this->retornar($log,$res_data);
        }
    }
    
    function rest_post($data,$canal){
        
        $log = array("request"=>$data,"canal"=>$canal,"metodo"=>$this->metodo,"httpVerb"=>"POST","tipoServicio"=>"REST");
        
        $starttime = microtime(true);

        $urlServicio=$this->servicios[$this->metodo];
        if($canal=="hogar"){
            $reqJSON=$this->load->view("Request/paradigma",$data,true);
        }else if($canal=="xdr" || $canal=="xdr_prepago" || $canal=="citi"){
            $reqJSON=$this->load->view("Request/".$this->metodo,$data,true);
        }
        $log["url"] = $urlServicio;
        $log["reqXML"] = $reqJSON;
            
        //return array("error"=>1,"response"=>$reqJSON,"metodo"=>$this->metodo,"data"=>$data);

        $header = array(
            "Content-type: application/json;charset=\"utf-8\"",
            "Accept: application/json",
            "Cache-Control: no-cache",
            "Pragma: no-cache",
            "SOAPAction: \"run\"",
            "Content-length: ".strlen($reqJSON),
        );

        if($canal=="xdr"){
            $header[]="User:xdrws";
            $header[]="Password:xdrws1*";
        }else if($canal=="xdr_prepago"){
            $header[]="User:xdrws";
            //$header[]="Password:xdrws1*";
            $header[]="Password:ClaroXdr1";
        }


        $soap_do = curl_init();
        curl_setopt($soap_do, CURLOPT_URL, $urlServicio);
        curl_setopt($soap_do, CURLOPT_CONNECTTIMEOUT, 0);
        curl_setopt($soap_do, CURLOPT_TIMEOUT,        0);
        curl_setopt($soap_do, CURLOPT_RETURNTRANSFER, true );
        curl_setopt($soap_do, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($soap_do, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($soap_do, CURLOPT_POST,           true );
        curl_setopt($soap_do, CURLOPT_POSTFIELDS,     $reqJSON);
        curl_setopt($soap_do, CURLOPT_HTTPHEADER,     $header);
        $res = curl_exec($soap_do);
        $resHTML=$res;
        $log["resXML"] = $res;

        $now = new DateTime();
        $diff = microtime(true) - $starttime;
        $sec = intval($diff);
        $micro = $diff - $sec;
        $final = strftime('%T', mktime(0, 0, $sec)) . str_replace('0.', '.', sprintf('%.4f', $micro));
        $secs = $final;
        $log["tiempo"] = $secs;

        //return array("error"=>1,"response"=>$res,"secs"=>$secs);

        if(!$res || $res==null) {
            $res = 'Error: ' . curl_error($soap_do);
            curl_close($soap_do);
            $log["response"] = $res;
            $log["isError"] = 1;
            //$res_data = array("error"=>1,"response"=>$res);

            $res_data = array("error"=>1,"response"=> "En este momento no podemos atender esta solicitud, intenta nuevamente.");
            return $this->retornar($log,$res_data);
            //return array("error"=>1,"response"=>$res,"secs"=>$secs);

        } else {
            curl_close($soap_do);
            $res=json_decode($res, true);
                //return array("error"=>0,"response"=>$res);

            if ((json_last_error() == JSON_ERROR_NONE)) {

                if($canal=="xdr" || $canal=="xdr_prepago" || $canal =="citi"){

                    $resJSON=json_decode($this->load->view("Response/".$this->metodo,$res,true));
                    if ($resJSON) {
                        $resJSON->secs=$secs;
                    }
                    
                    $log["response"] = $resJSON;
                    $log["isError"] = 0;
                    $res_data = $resJSON;
                    return $this->retornar($log,$res_data);
                    //return $resJSON;
                }else{
                    $res=json_decode($res["d"], true);
                    
                    
                    if ((json_last_error() == JSON_ERROR_NONE)) {
                        $log["response"] = $res;
                        $log["isError"] = 0;
                        $res_data = array("error"=>0,"response"=>$res,"secs"=>$secs);
                        return $this->retornar($log,$res_data);
                        //return array("error"=>0,"response"=>$res,"secs"=>$secs);
                    }else{
                        $log["response"] = $res["d"];
                        $log["isError"] = 1;
                        $res_data = array("error"=>1,"response"=>"En este momento no podemos atender esta solicitud, intenta nuevamente.","secs"=>$secs,"data"=>json_last_error());
                        return $this->retornar($log,$res_data);
                    }
                }
            }else{
                $log["response"] = $resHTML;
                $log["isError"] = 1;
                $res_data = array("error"=>1,"response"=>"En este momento no podemos atender esta solicitud, intenta nuevamente.","secs"=>$secs,"data"=>json_last_error());
                return $this->retornar($log,$res_data);
                //return array("error"=>1,"response"=>"El servicio no se encuentra disponible en este momento. (500)".$resHTML,"secs"=>$secs);
            }

        }
    }
    
    function rest_get($data,$canal){
        
        $log = array("request"=>$data,"canal"=>$canal,"metodo"=>$this->metodo,"httpVerb"=>"GET","tipoServicio"=>"REST");
        
        
        $starttime = microtime(true);

        $urlServicio=$this->servicios[$this->metodo];
        if($canal=="citi"){
            $urlServicio = str_replace("{AccountId}", $data["AccountId"], $urlServicio);
            $urlServicio = str_replace("{platform}", $data["platform"], $urlServicio);
            $urlServicio = str_replace("{tipo}", $data["tipo"], $urlServicio);
        }

        $header = array(
            "Content-type: application/json;charset=\"utf-8\"",
            "Accept: application/json",
            "Cache-Control: no-cache",
            "Pragma: no-cache",
            "SOAPAction: \"run\""
        );

        if($canal=="citi"){
            $header[] = "Authenticate: TWlDTEFSTzpNaUNMQVJP";
        }else if($canal=="gps"){
            
            $header = array(
                "Content-type: application/json;charset=\"utf-8\"",
                "Accept: application/json",
                "Cache-Control: no-cache",
                "Pragma: no-cache",
                "Authorization: Basic c29hcEBhbXgtcmVzLWNvOlNvYXAuMjAxMw=="
            );
            
            $tipoDefault = "L";
            $data["observaciones"] = isset($data["observaciones"])?urlencode($data["observaciones"]):$data["observaciones"];

            $urlServicio = isset($data["AccountId"])?str_replace("{AccountId}", $data["AccountId"], $urlServicio):$urlServicio;
            $urlServicio = isset($data["idAgenda"])?str_replace("{idAgenda}", $data["idAgenda"], $urlServicio):$urlServicio;
            $urlServicio = isset($data["orden"])?str_replace("{orden}", $data["orden"], $urlServicio):$urlServicio;
            $urlServicio = isset($data["fechaIni"])?str_replace("{fechaIni}", $data["fechaIni"], $urlServicio):$urlServicio;
            $urlServicio = isset($data["fechaFin"])?str_replace("{fechaFin}", $data["fechaFin"], $urlServicio):$urlServicio;
            $urlServicio = isset($data["activityId"])?str_replace("{activityId}", $data["activityId"], $urlServicio):$urlServicio;
            $urlServicio = isset($data["resourceId"])?str_replace("{resourceId}", $data["resourceId"], $urlServicio):$urlServicio;
            $urlServicio = isset($data["IRAZONID"])?str_replace("{idMotivo}", $data["IRAZONID"], $urlServicio):$urlServicio;
            $urlServicio = isset($data["tipo"])?str_replace("{tipo}", $data["tipo"], $urlServicio):str_replace("{tipo}",$tipoDefault, $urlServicio);
            $urlServicio = isset($data["correo"])?str_replace("{correo}", $data["correo"], $urlServicio):$urlServicio;
            $urlServicio = isset($data["observaciones"])?str_replace("{observaciones}", $data["observaciones"], $urlServicio):$urlServicio;
        }
        $log["url"] = $urlServicio;

        
        //return array("error"=>1,"url"=>$urlServicio);
        
        $soap_do = curl_init();
        curl_setopt($soap_do, CURLOPT_URL, $urlServicio);
        curl_setopt($soap_do, CURLOPT_CONNECTTIMEOUT, 0);
        curl_setopt($soap_do, CURLOPT_TIMEOUT,        0);
        curl_setopt($soap_do, CURLOPT_RETURNTRANSFER, true );
        curl_setopt($soap_do, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($soap_do, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($soap_do, CURLOPT_HTTPHEADER,     $header);
        $res = curl_exec($soap_do);
        $resHTML=$res;
        $log["resXML"] = $res;

        //return array("error"=>1,"response"=>$res);


        $now = new DateTime();
        $diff = microtime(true) - $starttime;
        $sec = intval($diff);
        $micro = $diff - $sec;
        $final = strftime('%T', mktime(0, 0, $sec)) . str_replace('0.', '.', sprintf('%.4f', $micro));
        $secs = $final;

        $log["tiempo"] = $secs;

        if(!$res) {
            $res = 'Error: ' . curl_error($soap_do);
            curl_close($soap_do);
            
            
            $log["response"] = $res."(".$urlServicio.")";
            $log["isError"] = 1;
            //$res_data = array("error"=>1,"response"=>$res);

            $res_data = array("error"=>1,"response"=> "En este momento no podemos atender esta solicitud, intenta nuevamente.");
            return $this->retornar($log,$res_data);
            //***return array("error"=>1,"response"=>$res."(".$urlServicio.")","secs"=>$secs);

        } else {
            curl_close($soap_do);
            $res=json_decode($res, true);

            if ((json_last_error() == JSON_ERROR_NONE)) {
                //--return array("error"=>0,"response"=>$res);
                $resJSON=json_decode($this->load->view("Response/rest/".$this->metodo,$res,true));
                if ($resJSON) {
                    $resJSON->secs=$secs;
                }
                
                $log["response"] =$resJSON;
                $log["isError"] = 0;
                $res_data = $resJSON;
                return $this->retornar($log,$res_data);
                //return $resJSON;
            }else{
                $log["response"] =json_last_error();
                $log["isError"] = 1;
                $res_data = array("error"=>1,"response"=>"En este momento no podemos atender esta solicitud, intenta nuevamente.","secs"=>$secs);
                return $this->retornar($log,$res_data);
                //return array("error"=>1,"response"=>"El servicio no se encuentra disponible en este momento.","secs"=>$secs);
            }
        }
    }

    function fnEncrypt($string, $key)
    {
        $encrypt_method = 'AES-128-ECB';
        $iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length($encrypt_method));
        $output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);
        //$output = base64_encode($output);

        return $output;
    }
    
    function esArray($val){
        $temp=json_encode($val, true);
        if(json_last_error()==JSON_ERROR_NONE){
            $temp=json_decode($temp);
        
            if( is_array($temp)){
                return true;
            }else{
                return false;
            }
        }else{
            return false;
        }
    }

    function arrayToString($val){

        if (isset($val)){
            $temp=json_encode($val, true);
            
            if(json_last_error()==JSON_ERROR_NONE){
                $temp=json_decode($temp);
            
                if( is_array($temp)){
                    return "";
                }else{
                    return trim($val);
                }
            }else{
                return trim($val);
            }
        }else{
            return "";
        }
    }
    
    function getArray($val){

        $list=array();
        $temp=json_encode($val, true);
        $temp=json_decode($temp);

        if( is_array($temp)){
            return $temp;
        }else{
            array_push($list,$temp);
            return $list;
        }
    }
    
    function parseToInt($val){
        return intval($val);
    }
    
    

}
